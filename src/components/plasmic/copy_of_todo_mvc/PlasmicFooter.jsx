// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4i89zEd2mZSwh8sdV1ACi1
// Component: RjfmIpTZ30ae9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ToggleButton from "../../ToggleButton"; // plasmic-import: xkNjn04c8KLci/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_todo_mvc.module.css"; // plasmic-import: 4i89zEd2mZSwh8sdV1ACi1/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: RjfmIpTZ30ae9/css

export const PlasmicFooter__VariantProps = new Array("state");

export const PlasmicFooter__ArgProps = new Array("count");

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  return (
    <div
      data-plasmic-name={"footerContainer"}
      data-plasmic-override={overrides.footerContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.footerContainer
      )}
    >
      {(
        hasVariant(variants, "state", "empty")
          ? false
          : hasVariant(variants, "state", "singularLeft")
          ? true
          : hasVariant(variants, "state", "hasCompleted")
          ? true
          : true
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__qbRap, {
            [sty.freeBoxstate_empty__qbRapDkzAd]: hasVariant(
              variants,
              "state",
              "empty"
            ),

            [sty.freeBoxstate_hasCompleted__qbRap5Gjm]: hasVariant(
              variants,
              "state",
              "hasCompleted"
            ),

            [sty.freeBoxstate_singularLeft__qbRapfRsPn]: hasVariant(
              variants,
              "state",
              "singularLeft"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "2",
            value: args.count,
            className: classNames(sty.slotTargetCount, {
              [sty.slotTargetCountstate_hasCompleted]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),

              [sty.slotTargetCountstate_singularLeft]: hasVariant(
                variants,
                "state",
                "singularLeft"
              )
            })
          })}

          {(hasVariant(variants, "state", "singularLeft") ? true : true) ? (
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text,
                {
                  [sty.textstate_empty]: hasVariant(variants, "state", "empty"),
                  [sty.textstate_hasCompleted]: hasVariant(
                    variants,
                    "state",
                    "hasCompleted"
                  ),

                  [sty.textstate_singularLeft]: hasVariant(
                    variants,
                    "state",
                    "singularLeft"
                  )
                }
              )}
            >
              {hasVariant(variants, "state", "singularLeft")
                ? " item left"
                : " items left"}
            </div>
          ) : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__y6Pzm)}
      >
        <ToggleButton
          data-plasmic-name={"allToggle"}
          data-plasmic-override={overrides.allToggle}
          className={classNames("__wab_instance", sty.allToggle)}
          state={"selected"}
        >
          {"All"}
        </ToggleButton>

        <ToggleButton
          data-plasmic-name={"completedToggle"}
          data-plasmic-override={overrides.completedToggle}
          className={classNames("__wab_instance", sty.completedToggle)}
        >
          {"Completed"}
        </ToggleButton>

        <ToggleButton
          data-plasmic-name={"activeToggle"}
          data-plasmic-override={overrides.activeToggle}
          className={classNames("__wab_instance", sty.activeToggle)}
        >
          {"Active"}
        </ToggleButton>
      </p.Stack>

      {(hasVariant(variants, "state", "hasCompleted") ? true : true) ? (
        <div
          data-plasmic-name={"clearBtn"}
          data-plasmic-override={overrides.clearBtn}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.clearBtn,
            {
              [sty.clearBtnstate_empty]: hasVariant(variants, "state", "empty"),
              [sty.clearBtnstate_hasCompleted]: hasVariant(
                variants,
                "state",
                "hasCompleted"
              ),

              [sty.clearBtnstate_hasCompleted_state_empty]:
                hasVariant(variants, "state", "hasCompleted") &&
                hasVariant(variants, "state", "empty"),
              [sty.clearBtnstate_hasCompleted_state_empty_state_singularLeft]:
                hasVariant(variants, "state", "hasCompleted") &&
                hasVariant(variants, "state", "singularLeft") &&
                hasVariant(variants, "state", "empty"),
              [sty.clearBtnstate_hasCompleted_state_singularLeft]:
                hasVariant(variants, "state", "hasCompleted") &&
                hasVariant(variants, "state", "singularLeft")
            }
          )}
        >
          {"Clear completed"}
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  footerContainer: [
    "footerContainer",
    "text",
    "allToggle",
    "completedToggle",
    "activeToggle",
    "clearBtn"
  ],

  text: ["text"],
  allToggle: ["allToggle"],
  completedToggle: ["completedToggle"],
  activeToggle: ["activeToggle"],
  clearBtn: ["clearBtn"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "footerContainer") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("footerContainer"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    allToggle: makeNodeComponent("allToggle"),
    completedToggle: makeNodeComponent("completedToggle"),
    activeToggle: makeNodeComponent("activeToggle"),
    clearBtn: makeNodeComponent("clearBtn"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
