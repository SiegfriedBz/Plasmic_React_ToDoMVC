// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4i89zEd2mZSwh8sdV1ACi1
// Component: 5FwQ19pZOli60
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gOQp-CGr-v4LV/component
import Task from "../../Task"; // plasmic-import: ZOATDhZ75qvqt/component
import Footer from "../../Footer"; // plasmic-import: RjfmIpTZ30ae9/component
import { useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 7bW5PLqcuYYi8/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_copy_of_todo_mvc.module.css"; // plasmic-import: 4i89zEd2mZSwh8sdV1ACi1/projectcss
import sty from "./PlasmicTodoApp.module.css"; // plasmic-import: 5FwQ19pZOli60/css

export const PlasmicTodoApp__VariantProps = new Array("state");

export const PlasmicTodoApp__ArgProps = new Array();

function PlasmicTodoApp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = args;
  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootglobal_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),

          [sty.rootstate_empty]: hasVariant(variants, "state", "empty")
        }
      )}
    >
      <div
        data-plasmic-name={"appTitle"}
        data-plasmic-override={overrides.appTitle}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.appTitle,
          {
            [sty.appTitleglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          }
        )}
      >
        {"todos"}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__tc2K7, {
          [sty.freeBoxglobal_theme_dark__tc2K7Xl4Fj]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          )
        })}
      >
        <div
          data-plasmic-name={"appBody"}
          data-plasmic-override={overrides.appBody}
          className={classNames(projectcss.all, sty.appBody, {
            [sty.appBodyglobal_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            )
          })}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.headerglobal_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),

              [sty.headerstate_empty]: hasVariant(variants, "state", "empty")
            })}
            state={hasVariant(variants, "state", "empty") ? "empty" : undefined}
          />

          {(hasVariant(variants, "state", "empty") ? false : true) ? (
            <div
              data-plasmic-name={"tasksContainer"}
              data-plasmic-override={overrides.tasksContainer}
              className={classNames(projectcss.all, sty.tasksContainer, {
                [sty.tasksContainerstate_empty]: hasVariant(
                  variants,
                  "state",
                  "empty"
                )
              })}
            >
              <Task
                className={classNames("__wab_instance", sty.task__iOqr2, {
                  [sty.taskglobal_theme_dark__iOqr2Xl4Fj]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),

                  [sty.taskstate_empty__iOqr20HikI]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  )
                })}
              >
                {"Some kind of text here"}
              </Task>

              <Task
                className={classNames("__wab_instance", sty.task__bcLkf, {
                  [sty.taskglobal_theme_dark__bcLkfXl4Fj]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
                state={"editing"}
              >
                {"Some kind of text here"}
              </Task>

              <Task
                className={classNames("__wab_instance", sty.task__wR7Wl)}
                state={"checked"}
              >
                {"Some kind of text here"}
              </Task>

              <Task className={classNames("__wab_instance", sty.task___9CqIt)}>
                {"I have a task to do something that takes a long time"}
              </Task>
            </div>
          ) : null}

          {(hasVariant(variants, "state", "empty") ? false : true) ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer, {
                [sty.footerstate_empty]: hasVariant(variants, "state", "empty")
              })}
              count={"2"}
              state={["hasCompleted"]}
            />
          ) : null}
        </div>

        {(hasVariant(variants, "state", "empty") ? false : true) ? (
          <div
            data-plasmic-name={"fakeStack"}
            data-plasmic-override={overrides.fakeStack}
            className={classNames(projectcss.all, sty.fakeStack, {
              [sty.fakeStackstate_empty]: hasVariant(variants, "state", "empty")
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox___6NNg, {
                [sty.freeBoxglobal_theme_dark___6NNgXl4Fj]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            />

            <div
              className={classNames(projectcss.all, sty.freeBox__qyQJ, {
                [sty.freeBoxglobal_theme_dark__qyQJXl4Fj]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            />
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "footer",
    "fakeStack"
  ],

  appTitle: ["appTitle"],
  appBody: ["appBody", "header", "tasksContainer", "footer"],
  header: ["header"],
  tasksContainer: ["tasksContainer"],
  footer: ["footer"],
  fakeStack: ["fakeStack"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTodoApp__ArgProps,
          internalVariantPropNames: PlasmicTodoApp__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    header: makeNodeComponent("header"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),
    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
